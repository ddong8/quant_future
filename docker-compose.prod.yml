# 生产环境 Docker Compose 配置
# 使用方法: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # PostgreSQL - 生产环境配置
  postgres:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trading_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # 必须通过环境变量设置
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # 备份目录
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis - 生产环境配置
  redis:
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c "
        if [ -n '${REDIS_PASSWORD}' ]; then
          redis-server --requirepass ${REDIS_PASSWORD}
        else
          redis-server
        fi
      "
    restart: always

  # InfluxDB - 生产环境配置
  influxdb:
    environment:
      INFLUXDB_DB: ${INFLUXDB_DB:-trading}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_ADMIN_USER:-admin}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      INFLUXDB_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
    restart: always

  # 数据库初始化容器 - 生产环境配置
  db-init:
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-trading_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-trading-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-market-data}
      - SECRET_KEY=${SECRET_KEY}  # 必须通过环境变量设置
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DB_INIT_TIMEOUT=${DB_INIT_TIMEOUT:-120}
      - DB_INIT_RETRY_COUNT=${DB_INIT_RETRY_COUNT:-10}
      - DB_INIT_RETRY_DELAY=${DB_INIT_RETRY_DELAY:-5}
    volumes:
      - ./logs:/var/log/trading
      - db_init_status:/var/lib/db-init
    healthcheck:
      test: ["CMD", "python", "init_healthcheck.py"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  # 后端服务 - 生产环境配置
  backend:
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-trading_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-trading-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-market-data}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${BACKEND_WORKERS:-4}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo '⏳ 等待数据库初始化完成...' &&
        python check_init_status.py --wait --timeout 600 &&
        echo '🚀 启动生产服务器...' &&
        gunicorn app.main:app -w ${WORKERS:-4} -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
      "

  # 前端服务 - 生产环境配置
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE_URL=${FRONTEND_API_URL:-http://localhost:8000/api/v1}
        - VITE_WS_BASE_URL=${FRONTEND_WS_URL:-ws://localhost:8000/api/v1/ws}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: trading_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: always
    profiles:
      - nginx  # 只在指定 profile 时启动

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  influxdb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/influxdb
  db_init_status:
    driver: local