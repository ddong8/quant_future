services:
  postgres:
    image: postgres:13
    container_name: trading_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trading_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    container_name: trading_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  influxdb:
    image: influxdb:2.0
    container_name: trading_influxdb
    environment:
      INFLUXDB_DB: ${INFLUXDB_DB:-trading}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_ADMIN_USER:-admin}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD:-password}
      INFLUXDB_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:-my-super-secret-auth-token}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库初始化容器
  db-init:
    build:
      context: ./backend
      dockerfile: Dockerfile.init
    container_name: trading_db_init
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/trading_db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - INFLUXDB_URL=${INFLUXDB_URL:-http://influxdb:8086}
      - INFLUXDB_TOKEN=${INFLUXDB_ADMIN_TOKEN:-my-super-secret-auth-token}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-trading-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-market-data}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DB_INIT_TIMEOUT=${DB_INIT_TIMEOUT:-60}
      - DB_INIT_RETRY_COUNT=${DB_INIT_RETRY_COUNT:-5}
      - DB_INIT_RETRY_DELAY=${DB_INIT_RETRY_DELAY:-2}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    restart: "no"  # 初始化容器只运行一次
    volumes:
      - ./backend:/app
      - ./logs:/var/log/trading
      - db_init_status:/var/lib/db-init
    command: ["python", "run_init.py"]

  # 完整的FastAPI后端应用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=development
    container_name: trading_backend
    environment:
      # 数据库连接配置
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-super-secret-auth-token
      - INFLUXDB_ORG=trading-org
      - INFLUXDB_BUCKET=market-data
      
      # 应用配置
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - DEBUG=true
      - LOG_LEVEL=INFO
      - APP_NAME=量化交易平台
      - APP_VERSION=0.1.0
      
      # 数据库初始化配置
      - DB_INIT_TIMEOUT=30
      - DB_INIT_RETRY_COUNT=5
      - DB_INIT_RETRY_DELAY=2
      
      # JWT 配置
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # 健康检查配置
      - HEALTH_CHECK_INTERVAL=30s
      - HEALTH_CHECK_TIMEOUT=10s
      - HEALTH_CHECK_RETRIES=3
      
      # 性能配置
      - WORKER_PROCESSES=1
      - WORKER_CONNECTIONS=1000
      - KEEPALIVE_TIMEOUT=65
      
      # 数据库连接池配置
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_POOL_RECYCLE=300
      - DB_POOL_PRE_PING=true
      
      # Redis 配置
      - REDIS_MAX_CONNECTIONS=50
      - REDIS_CONNECTION_TIMEOUT=5
      
      # CORS 配置
      - DEV_CORS_ORIGINS=["http://localhost:3000", "http://127.0.0.1:3000"]
      
      # 容器特定配置
      - CONTAINER_NAME=trading_backend
      - CONTAINER_ENV=docker
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - ./logs:/var/log/trading
      - db_init_status:/var/lib/db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - default
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    command: ["python", "start_backend.py"]

  # 完整的Vue.js前端应用
  frontend:
    image: node:18-alpine
    container_name: trading_frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    environment:
      # 前端访问的API地址（浏览器访问）
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_WS_BASE_URL=ws://localhost:8000/api/v1/ws
      
      # 开发服务器代理配置（容器内部通信）
      - VITE_API_PROXY_TARGET=http://backend:8000
      - VITE_WS_PROXY_TARGET=ws://backend:8000
      
      # 应用配置
      - VITE_APP_TITLE=量化交易平台
      - VITE_APP_VERSION=0.1.0
      - VITE_ENABLE_DEBUG=true
      
      # 网络配置
      - VITE_REQUEST_TIMEOUT=30000
      - VITE_WEBSOCKET_TIMEOUT=30000
      
      # Node.js 配置
      - NODE_ENV=development
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo '📦 安装前端依赖...' &&
        npm install --silent &&
        echo '🔍 验证后端连接...' &&
        wget --timeout=30 --tries=3 --spider http://backend:8000/api/v1/health/ || echo '⚠️  后端服务暂未就绪' &&
        echo '🚀 启动Vue.js开发服务器...' &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  db_init_status:

networks:
  default:
    name: trading_network