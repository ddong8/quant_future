"""Add order tables

Revision ID: 004
Revises: 003
Create Date: 2024-01-15 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '004'
down_revision = '003'
branch_labels = None
depends_on = None


def upgrade():
    # Create order type enum
    order_type_enum = postgresql.ENUM(
        'market', 'limit', 'stop', 'stop_limit', 'trailing_stop', 'iceberg', 'twap', 'vwap',
        name='ordertype'
    )
    order_type_enum.create(op.get_bind())
    
    # Create order side enum
    order_side_enum = postgresql.ENUM(
        'buy', 'sell',
        name='orderside'
    )
    order_side_enum.create(op.get_bind())
    
    # Create order status enum
    order_status_enum = postgresql.ENUM(
        'pending', 'submitted', 'accepted', 'partially_filled', 'filled', 
        'cancelled', 'rejected', 'expired', 'suspended',
        name='orderstatus'
    )
    order_status_enum.create(op.get_bind())
    
    # Create order time in force enum
    order_tif_enum = postgresql.ENUM(
        'day', 'gtc', 'ioc', 'fok', 'gtd',
        name='ordertimeinforce'
    )
    order_tif_enum.create(op.get_bind())
    
    # Create order priority enum
    order_priority_enum = postgresql.ENUM(
        'low', 'normal', 'high', 'urgent',
        name='orderpriority'
    )
    order_priority_enum.create(op.get_bind())
    
    # Create orders table
    op.create_table('orders',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=True),
        sa.Column('symbol', sa.String(length=20), nullable=False),
        sa.Column('order_type', order_type_enum, nullable=False),
        sa.Column('side', order_side_enum, nullable=False),
        sa.Column('status', order_status_enum, nullable=True),
        sa.Column('quantity', sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column('price', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('stop_price', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('filled_quantity', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('remaining_quantity', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('avg_fill_price', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('time_in_force', order_tif_enum, nullable=True),
        sa.Column('priority', order_priority_enum, nullable=True),
        sa.Column('iceberg_quantity', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('trailing_amount', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('trailing_percent', sa.Float(), nullable=True),
        sa.Column('expire_time', sa.DateTime(), nullable=True),
        sa.Column('submitted_at', sa.DateTime(), nullable=True),
        sa.Column('accepted_at', sa.DateTime(), nullable=True),
        sa.Column('filled_at', sa.DateTime(), nullable=True),
        sa.Column('cancelled_at', sa.DateTime(), nullable=True),
        sa.Column('commission', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('commission_asset', sa.String(length=10), nullable=True),
        sa.Column('total_value', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('max_position_size', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('risk_check_passed', sa.Boolean(), nullable=True),
        sa.Column('risk_check_message', sa.Text(), nullable=True),
        sa.Column('strategy_id', sa.Integer(), nullable=True),
        sa.Column('backtest_id', sa.Integer(), nullable=True),
        sa.Column('parent_order_id', sa.Integer(), nullable=True),
        sa.Column('source', sa.String(length=50), nullable=True),
        sa.Column('source_id', sa.String(length=100), nullable=True),
        sa.Column('broker', sa.String(length=50), nullable=True),
        sa.Column('account_id', sa.String(length=100), nullable=True),
        sa.Column('order_id_external', sa.String(length=100), nullable=True),
        sa.Column('tags', sa.JSON(), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('metadata', sa.JSON(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['backtest_id'], ['backtests.id'], ),
        sa.ForeignKeyConstraint(['parent_order_id'], ['orders.id'], ),
        sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_uuid'), 'orders', ['uuid'], unique=True)
    op.create_index(op.f('ix_orders_symbol'), 'orders', ['symbol'], unique=False)
    op.create_index(op.f('ix_orders_order_type'), 'orders', ['order_type'], unique=False)
    op.create_index(op.f('ix_orders_side'), 'orders', ['side'], unique=False)
    op.create_index(op.f('ix_orders_status'), 'orders', ['status'], unique=False)
    op.create_index(op.f('ix_orders_strategy_id'), 'orders', ['strategy_id'], unique=False)
    op.create_index(op.f('ix_orders_backtest_id'), 'orders', ['backtest_id'], unique=False)
    op.create_index(op.f('ix_orders_parent_order_id'), 'orders', ['parent_order_id'], unique=False)
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    
    # Create order_fills table
    op.create_table('order_fills',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=True),
        sa.Column('order_id', sa.Integer(), nullable=False),
        sa.Column('fill_id_external', sa.String(length=100), nullable=True),
        sa.Column('quantity', sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column('price', sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column('value', sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column('commission', sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column('commission_asset', sa.String(length=10), nullable=True),
        sa.Column('fill_time', sa.DateTime(), nullable=False),
        sa.Column('liquidity', sa.String(length=10), nullable=True),
        sa.Column('counterparty', sa.String(length=100), nullable=True),
        sa.Column('metadata', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_fills_id'), 'order_fills', ['id'], unique=False)
    op.create_index(op.f('ix_order_fills_uuid'), 'order_fills', ['uuid'], unique=True)
    op.create_index(op.f('ix_order_fills_order_id'), 'order_fills', ['order_id'], unique=False)
    
    # Create order_templates table
    op.create_table('order_templates',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=True),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('category', sa.String(length=50), nullable=True),
        sa.Column('template_config', sa.JSON(), nullable=False),
        sa.Column('default_parameters', sa.JSON(), nullable=True),
        sa.Column('usage_count', sa.Integer(), nullable=True),
        sa.Column('tags', sa.JSON(), nullable=True),
        sa.Column('is_official', sa.Boolean(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('author_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_templates_id'), 'order_templates', ['id'], unique=False)
    op.create_index(op.f('ix_order_templates_uuid'), 'order_templates', ['uuid'], unique=True)


def downgrade():
    # Drop tables
    op.drop_index(op.f('ix_order_templates_uuid'), table_name='order_templates')
    op.drop_index(op.f('ix_order_templates_id'), table_name='order_templates')
    op.drop_table('order_templates')
    
    op.drop_index(op.f('ix_order_fills_order_id'), table_name='order_fills')
    op.drop_index(op.f('ix_order_fills_uuid'), table_name='order_fills')
    op.drop_index(op.f('ix_order_fills_id'), table_name='order_fills')
    op.drop_table('order_fills')
    
    op.drop_index(op.f('ix_orders_user_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_parent_order_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_backtest_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_strategy_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_status'), table_name='orders')
    op.drop_index(op.f('ix_orders_side'), table_name='orders')
    op.drop_index(op.f('ix_orders_order_type'), table_name='orders')
    op.drop_index(op.f('ix_orders_symbol'), table_name='orders')
    op.drop_index(op.f('ix_orders_uuid'), table_name='orders')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_table('orders')
    
    # Drop enums
    op.execute('DROP TYPE orderpriority')
    op.execute('DROP TYPE ordertimeinforce')
    op.execute('DROP TYPE orderstatus')
    op.execute('DROP TYPE orderside')
    op.execute('DROP TYPE ordertype')