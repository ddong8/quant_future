"""add sample kline data

Revision ID: 013
Revises: 012
Create Date: 2024-01-15 11:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime, timedelta
import random

# revision identifiers, used by Alembic.
revision = '013'
down_revision = '012'
branch_labels = None
depends_on = None


def upgrade():
    # 创建示例K线数据
    connection = op.get_bind()
    
    # 获取标的ID
    symbols_result = connection.execute(sa.text("SELECT id, symbol FROM symbols LIMIT 5"))
    symbols = symbols_result.fetchall()
    
    if not symbols:
        return
    
    # 为每个标的生成K线数据
    for symbol_id, symbol_code in symbols:
        # 生成最近365天的日K线数据
        base_price = random.uniform(50, 200)  # 基础价格
        
        for i in range(365):
            date = datetime.now() - timedelta(days=365-i)
            open_time = date.replace(hour=9, minute=30, second=0, microsecond=0)
            close_time = date.replace(hour=16, minute=0, second=0, microsecond=0)
            
            # 模拟价格波动
            price_change = random.uniform(-0.05, 0.05)  # -5% 到 +5% 的变化
            open_price = base_price * (1 + price_change)
            
            # 生成OHLC数据
            high_change = random.uniform(0, 0.03)  # 0% 到 3% 的上涨
            low_change = random.uniform(-0.03, 0)  # -3% 到 0% 的下跌
            close_change = random.uniform(-0.02, 0.02)  # -2% 到 2% 的变化
            
            high_price = open_price * (1 + high_change)
            low_price = open_price * (1 + low_change)
            close_price = open_price * (1 + close_change)
            
            # 确保OHLC逻辑正确
            high_price = max(high_price, open_price, close_price)
            low_price = min(low_price, open_price, close_price)
            
            # 生成成交量
            volume = random.uniform(100000, 1000000)
            turnover = volume * (open_price + close_price) / 2
            
            # 插入K线数据
            connection.execute(sa.text("""
                INSERT INTO klines (
                    symbol_id, interval, open_time, close_time,
                    open_price, high_price, low_price, close_price,
                    volume, turnover, trade_count, vwap,
                    data_provider, is_final, created_at, updated_at
                ) VALUES (
                    :symbol_id, '1d', :open_time, :close_time,
                    :open_price, :high_price, :low_price, :close_price,
                    :volume, :turnover, :trade_count, :vwap,
                    'INTERNAL', true, now(), now()
                )
            """), {
                'symbol_id': symbol_id,
                'open_time': open_time,
                'close_time': close_time,
                'open_price': round(open_price, 2),
                'high_price': round(high_price, 2),
                'low_price': round(low_price, 2),
                'close_price': round(close_price, 2),
                'volume': int(volume),
                'turnover': round(turnover, 2),
                'trade_count': random.randint(1000, 5000),
                'vwap': round((open_price + high_price + low_price + close_price) / 4, 2)
            })
            
            # 更新基础价格为收盘价
            base_price = close_price
        
        # 为每个标的生成最新的报价数据
        latest_close = base_price
        prev_close = base_price * (1 + random.uniform(-0.02, 0.02))
        change = latest_close - prev_close
        change_percent = (change / prev_close) * 100 if prev_close != 0 else 0
        
        connection.execute(sa.text("""
            INSERT INTO quotes (
                symbol_id, price, bid_price, ask_price, bid_size, ask_size,
                change, change_percent, volume, turnover,
                open_price, high_price, low_price, prev_close,
                data_provider, data_status, delay_seconds,
                quote_time, received_at
            ) VALUES (
                :symbol_id, :price, :bid_price, :ask_price, :bid_size, :ask_size,
                :change, :change_percent, :volume, :turnover,
                :open_price, :high_price, :low_price, :prev_close,
                'INTERNAL', 'ACTIVE', 0,
                now(), now()
            )
        """), {
            'symbol_id': symbol_id,
            'price': round(latest_close, 2),
            'bid_price': round(latest_close * 0.999, 2),
            'ask_price': round(latest_close * 1.001, 2),
            'bid_size': random.randint(100, 1000),
            'ask_size': random.randint(100, 1000),
            'change': round(change, 2),
            'change_percent': round(change_percent, 2),
            'volume': random.randint(100000, 1000000),
            'turnover': round(latest_close * random.randint(100000, 1000000), 2),
            'open_price': round(latest_close * (1 + random.uniform(-0.02, 0.02)), 2),
            'high_price': round(latest_close * (1 + random.uniform(0, 0.03)), 2),
            'low_price': round(latest_close * (1 + random.uniform(-0.03, 0)), 2),
            'prev_close': round(prev_close, 2)
        })


def downgrade():
    # 删除示例数据
    op.execute("DELETE FROM quotes WHERE data_provider = 'INTERNAL'")
    op.execute("DELETE FROM klines WHERE data_provider = 'INTERNAL'")