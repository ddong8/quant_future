# 开发环境 Docker Compose 配置
# 使用方法: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # 数据库初始化容器 - 开发环境配置
  db-init:
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      - ./backend:/app:ro  # 只读挂载，防止容器修改源码
    healthcheck:
      test: ["CMD", "python", "init_healthcheck.py"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # 后端服务 - 开发环境配置
  backend:
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - UVICORN_RELOAD=true
      - WORKER_PROCESSES=1  # 开发环境使用单进程
      - DB_POOL_SIZE=5      # 开发环境减少连接池大小
      - REDIS_MAX_CONNECTIONS=20
    volumes:
      - ./backend:/app  # 开发环境允许热重载
    command: ["python", "start_backend.py"]
    # 开发环境的健康检查更频繁
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # 前端服务 - 开发环境配置
  frontend:
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_WS_BASE_URL=ws://localhost:8000/api/v1/ws
      - VITE_API_PROXY_TARGET=http://backend:8000
      - VITE_WS_PROXY_TARGET=ws://backend:8000
      - VITE_ENABLE_DEBUG=true
      - VITE_REQUEST_TIMEOUT=10000  # 开发环境较短超时
    command: >
      sh -c "
        echo '📦 安装前端依赖...' &&
        npm install --silent &&
        echo '🔍 测试后端连接...' &&
        timeout 10 sh -c 'until wget -q --spider http://backend:8000/api/v1/health/; do echo \"等待后端服务...\"; sleep 2; done' &&
        echo '🚀 启动开发服务器...' &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "
    # 开发环境的健康检查
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # 开发工具容器
  dev-tools:
    build:
      context: ./backend
      dockerfile: Dockerfile.init
    container_name: trading_dev_tools
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-super-secret-auth-token
      - INFLUXDB_ORG=trading-org
      - INFLUXDB_BUCKET=market-data
    depends_on:
      - postgres
      - redis
      - influxdb
    volumes:
      - ./backend:/app
      - ./logs:/var/log/trading
    profiles:
      - tools  # 只在指定 profile 时启动
    command: >
      sh -c "
        echo '🛠️  开发工具容器已启动' &&
        echo '可用命令:' &&
        echo '  python check_db_status.py - 检查数据库状态' &&
        echo '  python wait_for_db.py - 等待数据库就绪' &&
        echo '  python check_init_status.py - 检查初始化状态' &&
        echo '  python validate_config.py - 验证配置' &&
        tail -f /dev/null
      "